package comlog.tophitsurl;
import java.io.IOException;
//import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class iphits {
	
	public static class ngMap extends
		Mapper<Object ,Text, Text, IntWritable> {
		
		private final static IntWritable one = new IntWritable(1);	
		//private final static String URLmatch = "/assets/img/home-logo.png";
		private final static String ipmatch = "10.153.239.5";
		//private final static Text pattern = new Text(URLmatch);	
		private final static Text pattern = new Text(ipmatch);	
		
		public void map(Object key, Text value, Context context)
			throws IOException, InterruptedException {
			
			String line = value.toString();
			if(line.contains(ipmatch)){
				context.write(pattern, one);
			}
		}
	}
	
	public static class ngReduce extends
		Reducer<Text, IntWritable, Text, IntWritable>{
		
		public void reduce(Text key, Iterable<IntWritable> values, Context context)
			throws IOException, InterruptedException {
			
			int sum = 0;
			for(IntWritable x : values){
				sum += x.get();
			}
			context.write(key, new IntWritable(sum));
		}
	}
	
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		
		Job job = Job.getInstance(conf, "URLcount");		
		job.setJarByClass(TopHitsUrl.class);
		job.setMapperClass(ngMap.class);
		job.setReducerClass(ngReduce.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setMapOutputValueClass(IntWritable.class);
		job.setMapOutputKeyClass(Text.class);
		
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		System.exit(job.waitForCompletion(true)? 0 : 1);
	}
}
