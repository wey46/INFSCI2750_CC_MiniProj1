package ngram;
import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class ngramWordCount {
	public static class ngMap extends
		Mapper<LongWritable ,Text, Text, IntWritable> {
			
		public void map(LongWritable key, Text value, Context context)
			throws IOException, InterruptedException {
					
			String line = value.toString();
			StringTokenizer tokenizer = new StringTokenizer(line);
			while (tokenizer.hasMoreTokens()){
				value.set(tokenizer.nextToken());
				context.write(value, new IntWritable(1));
			}
				
		}
	}
	
	public static class ngReduce extends
		Reducer<Text, IntWritable, Text, IntWritable>{
		
		public void reduce(Text key, Iterable<IntWritable> values, Context context)
			throws IOException, InterruptedException {
			
			int sum = 0;
			for(IntWritable x : values){
				sum += x.get();
			}
			context.write(key, new IntWritable(sum));
		}
	}
	
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		conf.set("grams", args[2]); // dynamicly pass variable to MapReduce
		Job job = Job.getInstance(conf, "ngramWordCount");		
		job.setJarByClass(ngramWordCount.class);
		job.setMapperClass(ngMap.class);
		job.setReducerClass(ngReduce.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true)? 0 : 1);
	}
}
